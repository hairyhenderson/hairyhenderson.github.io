<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on interesting things</title>
    <link>https://hairyhenderson.github.io/blog/public/post/</link>
    <description>Recent content in Posts on interesting things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Oct 2016 22:45:49 -0400</lastBuildDate>
    
	<atom:link href="https://hairyhenderson.github.io/blog/public/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Verified GitHub commits with Keybase</title>
      <link>https://hairyhenderson.github.io/blog/public/post/verified_github_commits_with_keybase/</link>
      <pubDate>Thu, 06 Oct 2016 22:45:49 -0400</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/verified_github_commits_with_keybase/</guid>
      <description>A while back, GitHub announced support for GPG signature verification. Now, git has supported signing commits and tags for a while, but it was a pain to manually verify signed commits, so I&amp;rsquo;m not sure the average developer even considered it.
I saw the announcement, and messed around with it for a few minutes then forgot about it, because I don&amp;rsquo;t use GPG very often, and it hadn&amp;rsquo;t yet clicked that Keybase is really just a GPG management tool&amp;hellip;</description>
    </item>
    
    <item>
      <title>Getting YubiKey working with Docker Content Trust on OS X</title>
      <link>https://hairyhenderson.github.io/blog/public/post/yubikey-dct/</link>
      <pubDate>Thu, 30 Jun 2016 22:19:39 -0400</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/yubikey-dct/</guid>
      <description>Getting YubiKey working with Docker Content Trust on OS X This wasn&amp;rsquo;t as straightforward as I would&amp;rsquo;ve liked, so I&amp;rsquo;m documenting this here.
First, some super-useful sources:
 Diogo MÃ³nica&amp;rsquo;s blog posting from DockerCon EU 2015 (DOCKER CONTENT TRUST GETS HARDWARE SIGNING) docker/notary#779 (Improve docs for typical CI usage with docker+notary) The YubiKey PIV CLI tool v1.4.3 zip docker/toolbox#461 (from here I gleaned that /usr/local/docker/lib is understood by notary)  I only figured this out because the folks above did most of the work!</description>
    </item>
    
    <item>
      <title>Wii Balance Board Fitbit logger - Part 1</title>
      <link>https://hairyhenderson.github.io/blog/public/post/wii-fitbit-logger-pt1/</link>
      <pubDate>Sat, 16 Apr 2016 10:33:41 -0400</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/wii-fitbit-logger-pt1/</guid>
      <description>There was a pretty interesting post that I recently came across - basically a link to InitialState/smart-scale on GitHub .
The basic idea is you take a Wii Balance Board (the one that came with Wii Fit), and hook it up via Bluetooth to a Raspberry Pi 3 (or any other computer with Bluetooth).
When I was reading the post, I tapped my wrist and realized my Fitbit was out of battery power and I&amp;rsquo;d have to go charge it soon.</description>
    </item>
    
    <item>
      <title>Wii Remote Hacks</title>
      <link>https://hairyhenderson.github.io/blog/public/post/wiihacks/</link>
      <pubDate>Sun, 13 Dec 2015 13:42:50 -0500</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/wiihacks/</guid>
      <description>It&amp;rsquo;d be cool to use the Wiimote and/or nunchuck as an input device to control I dunno, a drone or something?
Haven&amp;rsquo;t gotten very far, but here&amp;rsquo;s some links for posterity:
 wiibrew - lots of in-depth info, like docs for the various protocols and data formats, esp. around the &amp;lsquo;mote and nunchuck hackaday category - relevant articles gobot lib - i2c for the nunchuck nunchucky from Adafruit - breakout for nunchuck and other devices (like the classic controller) to use them directly  </description>
    </item>
    
    <item>
      <title>asciinema</title>
      <link>https://hairyhenderson.github.io/blog/public/post/asciinema/</link>
      <pubDate>Sat, 12 Dec 2015 13:21:28 -0500</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/asciinema/</guid>
      <description>Ran into this a while back, but I keep forgetting about it: https://asciinema.org
Using $ asciinema rec ... $ exit ...  It&amp;rsquo;ll start a new shell and record all the things (including timing and mistakes!), then upload it to their site for serving.
Modifying Download it:
$ curl -sL https://asciinema.org/a/abcd1234.json &amp;gt; rec.json  Edit the file&amp;hellip;
Upload it:
$ asciinema upload rec.json  Other useful options Record something that isn&amp;rsquo;t a shell:</description>
    </item>
    
    <item>
      <title>Using Hugo</title>
      <link>https://hairyhenderson.github.io/blog/public/post/using_hugo/</link>
      <pubDate>Sat, 12 Dec 2015 12:38:40 -0500</pubDate>
      
      <guid>https://hairyhenderson.github.io/blog/public/post/using_hugo/</guid>
      <description>Hugo&amp;rsquo;s pretty simple to use, but I use it so sporadically I figured I should jot down how I use it&amp;hellip;
Note: All the following commands assume I&amp;rsquo;m in the /blog subdirectory of the repo.
Installation I installed it with Homebrew:
$ brew install hugo  so to upgrade it I just brew update &amp;amp;&amp;amp; brew upgrade.
Previewing To get hugo to render on-the-fly:
$ hugo server --watch --buildDrafts  Writing new articles To start a new post:</description>
    </item>
    
  </channel>
</rss>